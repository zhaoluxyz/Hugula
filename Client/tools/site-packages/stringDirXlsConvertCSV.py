#
# Utility to convert strings from game2D's XML format to Excel and back.
#
# C.D. July	2006
#

import xml.dom.minidom
from pyExcelerator import *

# stuff	to handle text encodings
import codecs
enc, dec, read_wrap, write_wrap	= codecs.lookup('utf-8')

import struct
import os
import csv


def IsValidKey(key):
	for char in key:
		if (char == '_'
		or char == '-'
		or (char >= 'a' and char <= 'z')
		or (char >= 'A' and char <= 'Z')
		or (char >= '0' and char <= '9')):
			continue
		else:
			return False
	return True


def csv_from_excel():
	wb = xlrd.open_workbook('your_workbook.xls') 
	sh = wb.sheet_by_name('Sheet1')     
	your_csv_file = open('your_csv_file.csv', 'wb')     
	wr = csv.writer(your_csv_file, quoting=csv.QUOTE_ALL)      
	for rownum in xrange(sh.nrows):      
		wr.writerow(sh.row_values(rownum))     
		your_csv_file.close()


def my_csv_from_excel(sheet_name,vals,output):
	csvName=output+sheet_name+".csv"
	print(csvName)
	mycsv_file=open(output+sheet_name+".csv","wb")
	wr = csv.writer(mycsv_file, quoting=csv.QUOTE_ALL)
	matrixgolb = []
        matrix = [[]]
        for row_idx, col_idx in sorted(vals.keys()):
            #print row_idx,col_idx
            #print matrix
            v = vals[(row_idx, col_idx)]
            #print(v)
            if isinstance(v, float):##HACK: For value "5" excel return float.. so we don't want "5.0", is why we convert it in INT then STR
				f = str(v)
				if ".0" in f :
					f=int(v)
				v=str(f)

			#v=str(v)
            if isinstance(v, unicode):
                v = unicode(v) #v.encode('cp866', 'backslashreplace')
            else:
            	v = str(v)

            v = v.replace('\r',"\\r")
            v = v.replace('\n',"\\n")
            v = v.replace(u'\u2026', u'...')
            v = v.encode('utf-8')
            last_row, last_col = len(matrix), len(matrix[-1])

            while last_row <=row_idx:
                matrix.extend([[]])
                last_row = len(matrix)
            
            while last_col < col_idx:
                matrix[-1].extend([''])
                last_col = len(matrix[-1])
            
            matrix[-1].extend([v])
        for row in matrix:
             csv_row = ';'.join(row)
             matrixgolb.append(csv_row)
    	for item in matrixgolb:
            mycsv_file.write(item)
            mycsv_file.write('\n')
            #print item
        mycsv_file.close( )        
   # print  matrixgolb

def exportPetConfig( inputfile, group_prefix ,output):
	sheetcounter = 0
	xlWorkBook = parse_xls(inputfile, group_prefix)
	stringsData = {}
	#allString=[]
	for sheet_name, values in xlWorkBook:
		my_csv_from_excel(sheet_name,values,output)
		sheetcounter +=	1
		print sheet_name #,values
	#	allString=allString+strings
	#stringsData[" "]=(langs,allString)
	return stringsData

#wen xiao temp modify for this project
if __name__	== '__main__':
		if len(sys.argv) < 2:
			print "Usage: stringconv.py	(-xml2xls|-xls2xml|-xlssheets2xml|-xlssheets2bin|-xlssheets2binutf8) infile outfile configfile outputPack [group_prefix]	[--spec	xls_sheet_name]	[--upcase|--downcase] [--ignore	string]"
		else:
			infile = sys.argv[1]
			outfile	 = sys.argv[2]
			print(' in path name = '+infile)
			#printXLS(infile)
			for root, dirs, files in os.walk( infile ):
				for fname in files:
					print infile+"/"+fname
					exportPetConfig(infile+"/"+fname, "", outfile)


#if __name__	== '__main__':
#if len(sys.argv) < 6:
#	print "Usage: stringconv.py	(-xml2xls|-xls2xml|-xlssheets2xml|-xlssheets2bin|-xlssheets2binutf8) infile outfile configfile outputPack [group_prefix]	[--spec	xls_sheet_name]	[--upcase|--downcase] [--ignore	string]"
#else:
#	knownoptions = [ '--spec', '--upcase', '--downcase', '--ignore'	]
#	infile = sys.argv[2]
#	outfile	 = sys.argv[3]
#	configfile	 = sys.argv[4]
#	outputpack	 = sys.argv[5]
#
#	group_prefix = ""
#	ignoreList = []
#	if len(sys.argv) > 6 and not (sys.argv[6] in knownoptions):
#		group_prefix  =	sys.argv[6]
#
#	spec_name =	""
#	if '--spec'	in sys.argv:
#		spec_name =	sys.argv[sys.argv.index('--spec') +	1]
#
#		caseoption = None
#		if '--upcase' in sys.argv:
#			caseoption = 'up'
#		if '--downcase'	in sys.argv:
#			caseoption = 'down'
#
#	try:
#		ignoreIndex	= sys.argv.index('--ignore')
#		while ignoreIndex >	-1:
#			ignoreList.append(sys.argv[ignoreIndex + 1])
#			ignoreIndex	= sys.argv.index('--ignore', ignoreIndex+2)
#	except:
#		pass
#
#	if sys.argv[1] == '-xml2xls' :
#		stringsXML2XLS(infile, outfile,	group_prefix)
#	elif sys.argv[1] ==	'-xls2xml' :
#		stringsXLS2XML(infile, outfile,	group_prefix, caseoption)
#	elif sys.argv[1] ==	'-xlssheets2xml' :
#		stringsXLSSheet2XML(infile,	group_prefix, spec_name, ignoreList)
#	elif sys.argv[1] ==	'-xlssheets2bin':
#		stringsXLSSheet2BIN(infile,	group_prefix, spec_name, ignoreList)
#	elif sys.argv[1] ==	'-xlssheets2binutf8':
#		stringsXLSSheet2BIN_UTF8(infile,	group_prefix, spec_name, ignoreList)
#	else :
#		print 'Invalid conversion requested	:' + sys.argv[1]
#
#	GetWantedLanguage(configfile, outputpack);
#
#	print 'Done'




