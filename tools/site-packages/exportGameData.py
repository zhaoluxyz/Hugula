# -*- coding: utf-8 -*-
import  xdrlib ,sys
import xlrd
import string

global prefixName
global globalPrefixName
global isLog

def open_excel(file= 'gameData.xls'):
	try:
		data = xlrd.open_workbook(file)
		return data
	except Exception,e:
		print str(e)

def nakeName(name):
	details = name.split('_')
	if (len(details) > 1):
		details.pop(0)
		newname = string.join(details, '_')
		return newname
	else:
		return details[0]

def getExportLuaName(fileName):
	details = fileName.split('/')
	#name = string.join(details, "")
	#details = name.split('.')
	details = details[-1].split('.')
	details.pop(-1)
	name = string.join(details, "")
	#print("get export name %s" % (name))
	return name

def exportFiles(files):
	global prefixName
	file = open(globalPrefixName + '.lua', "w")
	file.write("%s = {}\n" % (globalPrefixName))
	for fileName in files:
		print("process file %s" % (fileName) )
		prefixName = getExportLuaName(fileName)
		exportAsLua(fileName, file)
	file.close()

def exportAsLua(fileName, file):
	global prefixName
	data = open_excel(fileName)
	sheetnum = data.nsheets
	list = []
	for tableid in range(sheetnum):
		sheet = data.sheets()[tableid]
		exportSheetAsLua(sheet)
		list.append(nakeName(sheet.name))
	file.write(globalPrefixName + "." + prefixName + " = {\n");
	file.write('\t["version"] = "001",\n')
	for item in list:
		file.write('\t[\"' + item + '\"] = {},\n')
	file.write("}\n")
	#write require info
	for tableid in range(sheetnum):
		sheet = data.sheets()[tableid]
		rowNum = sheet.nrows
		colNum = sheet.ncols
		if ((0 == rowNum) or (0 == colNum)):
			continue
		file.write('require("%s%s.tfl")\n' % (prefixName, nakeName(sheet.name)))

def exportSheetAsLua(sheet):
	global prefixName
	sheetName = sheet.name
	if ('1' == isLog):
		print("process %s sheet %s" % (prefixName, sheetName))
	rowNum = sheet.nrows
	colNum = sheet.ncols
	if ((0 == rowNum) or (0 == colNum)):
		return
	details = sheetName.split('_')
	isKeyType = 0
	if ("KEY" == details[0]):
		isKeyType = 1
	sheetName = nakeName(sheetName)
	file = open(prefixName + sheetName + '.lua', "w")
	file.write('local %s = %s.%s.%s\n\n' % (sheetName, globalPrefixName, prefixName, sheetName))
	#export title
	row = sheet.row_values(0)
	title = []
	for i in range(0, colNum):
		title.append(row[i])
	for i in range(1, rowNum):
		#export one row
		if ('1' == isLog):
			print("process row %d" % (i))

		datarow = sheet.row_values(i)

		details = title[0].split('_')
		type = details[0]
		keyName = ""
		if ("INT" == type):
			keyName = ('%d' % (datarow[0]))
		elif ("STR" == type):
			keyName = ('"%s"' % (datarow[0]))

		luaStr = ""
		if (isKeyType):
			luaStr += ('%s[%s] = ' % (sheetName, keyName))
		else:
			luaStr += ('table.insert(%s, ' % (sheetName))
		luaStr += '{\n'

		for j in range(0, colNum):
			details = title[j].split('_')
			type = details[0]
			if("nil" == datarow[j]):
				str = ('\t["%s"] = %s,\n' % (nakeName(title[j]), "nil") )
			elif ("" == datarow[j]):
				continue
			elif ("INT" == type):
				str = ('\t["%s"] = %d,\n' % (nakeName(title[j]), datarow[j]) )
			elif ("FLOAT" == type):
				str = ('\t["%s"] = %f,\n' % (nakeName(title[j]), datarow[j]) )
			elif ("BOOL" == type):
				str = ('\t["%s"] = %s,\n' % (nakeName(title[j]), datarow[j]) )
			elif ("STR" == type):
				str = ('\t["%s"] = "%s",\n' % (nakeName(title[j]), datarow[j]) )
			elif ("TABLE" == type):
				str = ('\t["%s"] = %s,\n' % (nakeName(title[j]), datarow[j]) )
			elif ("FUNC" == type):
				str = ('\t["%s"] = function(A, B, C, D, E) return (%s) end,\n' % (nakeName(title[j]), datarow[j]) )
			elif ("COMPLEXFUNC" == type):
				str = ('\t["%s"] = function(A, B, C, D, E) \n%s\n\tend,\n' % (nakeName(title[j]), datarow[j]) )
			else:
				continue
			luaStr += str
		if (isKeyType):
			luaStr += '}\n'
		else:
			luaStr += '})\n'
		file.write(luaStr.encode('utf-8'))
	file.close()

if __name__=="__main__":
	global prefixName
	if (len(sys.argv) >= 3):
		globalPrefixName = sys.argv[1]
		prefixName = ""
		isLog = '0'
		files = []
		for i in range(len(sys.argv) - 2):
			files.append(sys.argv[2+i])
		exportFiles(files)
		print("done")
	else:
		print("wrong when export, require [excel name]")
