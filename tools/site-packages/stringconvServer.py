#
# Utility to convert strings from game2D's XML format to Excel and back.
#
# C.D. July	2006
#

import xml.dom.minidom
from pyExcelerator import *

# stuff	to handle text encodings
import codecs
enc, dec, read_wrap, write_wrap	= codecs.lookup('utf-8')

import struct
import os

RUSSIAN_MAPPING_UTF8_TO_ASCII = [ (1040,'A'),
				  (1042,'B'),
				  (1045,'E'),
				  (1047,'3'),
				  (1050,'K'),
				  (1052,'M'),
				  (1053,'H'),
				  (1054,'O'),
				  (1056,'P'),
				  (1057,'C'),
				  (1058,'T'),
				  (1059,'Y'),
				  (1061,'X') ]

EXPORTED_SHEET_NAMES = []

def	parseXMLStrings( inputfile,	group_prefix):
	strings	= []
	langs =	set()
	doc	= xml.dom.minidom.parse( inputfile ).documentElement
	doc.normalize()
	for	node in	doc.getElementsByTagName('table') :
		section	= {}
		sectionName	= node.getAttribute('name')
		sectionName	= sectionName.lstrip(group_prefix)
		section['name']	= sectionName
		for	child in node.childNodes :
			if child.nodeType == child.ELEMENT_NODE	:
				name = child.tagName
				langs.add(name)
				data = []
				for	item in	child.childNodes :
					if item.nodeType ==	child.ELEMENT_NODE :
						data.append( item.getAttribute('value')	)
				section[name] =	data		
		strings.append(	section	)
	langs.remove('ids')

	#put english first...
	langs.remove('english')
	langlist = ['english'] + list(langs)
	return (langlist,strings)


#
#
#

def	parseXLSStrings( inputfile,	group_prefix, sheet):
#	try:
		langs =	[]
		sections = {}
	
		name,vals =	parse_xls(inputfile, group_prefix)[sheet]
	
		#count languages
		col	= 1
		while vals.has_key(	(0,col)	) :
			langs.append( vals[(0, col)] )
			col	+= 1
		numLangs = col - 1
		
		#count strings
		row	= 1
		while vals.has_key(	(row,0)	) :
			row	+= 1
		numStrings = row
	
		for	line in	range(1,numStrings)	:
			sectionName	= vals[(line, 0)]
			sectionName	= group_prefix + sectionName
			if not sections.has_key( sectionName ) :
				sections[sectionName] =	{ 'name' : sectionName,	'ids' :	[] }
				for	lang in	langs :
					sections[sectionName][lang]	= []
			section	= sections[sectionName]
			strId =	vals[(line,	0)]
			section['ids'].append(strId)
			for	i in range(numLangs) :
				strn = ' '
				if vals.has_key( (line,	i +	1) ) :
					strn = vals[(line, i + 1)]
					if isinstance(strn, float):##HACK: For value "5" excel return float.. so we don't want "5.0", is why we convert it in INT then STR
						strn = int(strn)
					strn = unicode(strn)
					# replace non-ascii	characters
					strn = strn.replace( u'\u2026', u'...')
					
				section[langs[i]].append( strn )
		  
#	except Exception, exc:
#		raise Exception('Error Converting Strings: [' +	name + ']['	+ sectionName +	'][' + strId + ']['	+ langs[i] + ']')
		
		return ( list(langs), sections.values()	)
   

#
#
#

def	stringsXML2XLS(	inputfile, outputfile, group_prefix) :

	(langs,strings)	= parseXMLStrings(inputfile, group_prefix)

	wb = Workbook()
	ws = wb.add_sheet('loc-base')

	columns	= ['section','id'] + langs
		
	for	i in range(len(columns)) :
		ws.col(i).width	= 200 *	32
		#ws.col(i).name	= columns[i] # TODO: figure	out	how	to write the column	titles
		ws.write(0,	i, columns[i])

	line = 1
	for	section	in strings :
		sectionName	= section['name']
		ids	= section['ids']
		for	i in range(len(ids)) :
			idname = ids[i]
			ws.write(line, 0, sectionName)
			ws.write(line, 1, idname)
			for	j in range(len(langs)) :
				transl = section[langs[j]]
				if i < len(transl) :
					ws.write(line, 2 + j, transl[i]	)
							   
			line +=	1


	wb.save(outputfile)

#
#
#

def	stringsXLS2XML(inputfile, outputfile, group_prefix,	caseoption)	:

	(langs,strings)	= parseXLSStrings(inputfile, group_prefix, 0)

	dom	= xml.dom.minidom.parseString( "<strings/>"	)
	doc	= dom.documentElement

	groups = ['ids'] + langs

	for	section	in strings :
		sectionName	= section['name']
		sectionNode	= dom.createElement('table')
		sectionNode.setAttribute('name',sectionName)
		doc.appendChild(sectionNode)

		# dump groups
		for	group in groups	:
			groupSection = dom.createElement(group)
			sectionNode.appendChild(groupSection)
			for	item in	section[group] :
				if group ==	'ids' :
					elemName = 'id'
				else:
					elemName = 'string'
					if caseoption == 'up':
						item = item.upper()
					if caseoption == 'down':
						item = item.lower()
				itemnode = dom.createElement( elemName )
				itemnode.setAttribute('value',item)
				groupSection.appendChild(itemnode)

	f =	open(outputfile,'wb')
	f =	write_wrap(f)
	f.write( dom.toprettyxml() )



def	stringsXLSSheet2XML(inputfile, group_prefix, spec_name,	ignoreList)	:

	sheetcounter = 0
	
	xlWorkBook = parse_xls(inputfile, group_prefix)

	if spec_name !=	"":
		#find the specified	spec sheet
		specSheetIndex = 0
		index =	0
		for	sheet_name,	values in xlWorkBook:
			if sheet_name == spec_name:
				specSheetIndex = index
			index += 1
		
		#organize redefined	string in spec sheet
		(langs,strings)	= parseXLSStrings(inputfile, group_prefix, specSheetIndex)
		redefinedString	= {}
		for	section	in strings:
			redefinedString[section['name']] = section
	
	for	sheet_name,	values in xlWorkBook:
		(langs,strings)	= parseXLSStrings(inputfile, group_prefix, sheetcounter)
		sheetcounter +=	1
	
		dom	= xml.dom.minidom.parseString( "<strings/>"	)
		doc	= dom.documentElement
	
		groups = ['ids'] + langs
	
		for	section	in strings :
			sectionName	= section['name']
			
			if spec_name !=	"":
				#overwrite texts redefined in spec sheet
				if redefinedString.has_key(sectionName):
					textToRemove = []
					for	textId in section['ids']:
						if textId in redefinedString[sectionName]['ids']:
							stringIndex	 = section['ids'].index(textId)
							newTextIndex = redefinedString[sectionName]['ids'].index(textId)
							isEmptyLine	 = True
							
							#update	text
							for	lang in	langs:
								newText	= redefinedString[sectionName][lang][newTextIndex]
								if newText.strip() != "":
									section[lang][stringIndex] = newText
									isEmptyLine	= False
							
							if isEmptyLine:
								textToRemove.append(stringIndex)
								
					#remove	text
					textToRemove.sort()
					textToRemove.reverse()
					for	stringIndex	in textToRemove:
						for	group in groups:
							section[group].pop(stringIndex)
			
			sectionNode	= dom.createElement('table')
			sectionNode.setAttribute('name',sectionName)
			doc.appendChild(sectionNode)
	
			# dump groups
			for	group in groups	:
				groupSection = dom.createElement(group)
				sectionNode.appendChild(groupSection)
				for	item in	section[group] :
					elemName = 'string'
					if group ==	'ids' :	elemName = 'id'
					itemnode = dom.createElement( elemName )
					item = removeIgnored(item, ignoreList)
					itemnode.setAttribute('value',item)
					groupSection.appendChild(itemnode)
	
		f =	open(outfile + sheet_name +	'.xml','wb')
		f =	write_wrap(f)
		f.write( dom.toprettyxml() )

def stringsXLSSheet2BIN(inputfile, group_prefix, spec_name,	ignoreList):

	sheetcounter = 0
	
	xlWorkBook = parse_xls(inputfile, group_prefix)
		
	stringsData = {}	
	for	sheet_name,	values in xlWorkBook:	
		(langs,strings)	= parseXLSStrings(inputfile, group_prefix, sheetcounter)
		sheetcounter +=	1
		stringsData[sheet_name] = (langs, strings)								
			
	ExportBinary(stringsData)
	ExportJavaConstants( "test.h", stringsData, "StrID")



def ExportBinary( stringsData ):
	global EXPORTED_SHEET_NAMES		
	for	sheetname, data	in stringsData.iteritems():
		(langs, strings) = data
		filename = sheetname.lower() + "."
		
		EXPORTED_SHEET_NAMES.append( sheetname.lower() )
		
		for section in strings:						
			for lang in langs:
				completeFilename = filename + lang.lower()
				f =	open(completeFilename,'wb')
				numString = len( section[lang] )
				#write total number of strings
				f.write( struct.pack('I', numString) )
				
				numString = len(section[lang])
				for i in range(0,numString):
					item = section[lang][i]
					item = item.upper()										
					item = item.replace("\\N", "\n")
					item = item.replace("\\N", '\n')
					item = item.replace( u'\u2026' ,'...')
					item = item.encode('ISO-8859-1')
					section[lang][i] = item
				
				#write offset table (stringlen)
				#for	item in	section[lang]:					
				#	if len(item) > 127:
				#		real_l = (0x8000 | (len(item)& 0xFFFF))
				#		first_byte = (real_l>>8) & 0xFF
				#		sec_byte = (real_l) & 0xFF
				#		f.write( struct.pack('B', first_byte))
				#		f.write( struct.pack('B', sec_byte))
				#	else:
				#		f.write( struct.pack('B', (len(item)&0xFF)))
								
				#write string data.												
				for	item in	section[lang]:								
					numByte = len(item)
					f.write( struct.pack('H', numByte) )
					for i in range(0, numByte):			
						f.write( item[i] )				
																												
				f.close()					

def ExportStringPackage( languageToUse, outPackageFile, stringsData):
	global EXPORTED_SHEET_NAMES		
	for	sheetname, data	in stringsData.iteritems():		
		EXPORTED_SHEET_NAMES.append( sheetname.lower() )
				
	ExportLanguageArray( languageToUse, outPackageFile)
	
def stringsLoadData( inputfile, group_prefix ):
	sheetcounter = 0
	xlWorkBook = parse_xls(inputfile, group_prefix)
	stringsData = {}	
	for sheet_name, values in xlWorkBook:	
		(langs,strings)	= parseXLSStrings(inputfile, group_prefix, sheetcounter)
		sheetcounter +=	1
		stringsData[sheet_name] = (langs, strings)	
	return stringsData
					
def stringsXLSSheet2BIN_UTF8(inputfile, group_prefix, spec_name,	ignoreList):

	sheetcounter = 0
	
	xlWorkBook = parse_xls(inputfile, group_prefix)
		
	stringsData = {}	
	for	sheet_name,	values in xlWorkBook:	
		(langs,strings)	= parseXLSStrings(inputfile, group_prefix, sheetcounter)
		sheetcounter +=	1
		stringsData[sheet_name] = (langs, strings)								
			
	ExportUTF8(stringsData)
	ExportJavaConstants( "test.h", stringsData, "StrID")

def getBinaryFilename(outFolder,sheet,lang):
	#TODO replace 'bad' filecharacters
	filename = sheet.lower() + "." + lang.lower()
	return os.path.join( outFolder, filename)
def getIdxMapFilename(outFolder, sheet):
	filename = sheet.lower() + ".idx"
	return os.path.join( outFolder, filename)

def getAllIdxFilenames( stringsData, outFolder=""):
	targets = []
	for sheetname, data in stringsData.iteritems():
		targets.append(getIdxMapFilename(outFolder, sheetname))
	return targets

def getAllBinaryFilenames( stringsData, outFolder=""):
	targets = []
	for	sheetname, data	in stringsData.iteritems():
		(langs, strings) = data
		for section in strings:						
			for lang in langs:
				targets.append(getBinaryFilename(outFolder,sheetname,lang))

	return targets

def OpenFileAsciiOrUnicode( filename, openMode, openType ):
	if openType == 'UTF-8':
		s = codecs.open(filename, openMode,'UTF-8')
	elif openType == 'UTF-16'	:
		s = codecs.open(filename, openMode,'UTF-16')
	else:
		s = codecs.open(filename, openMode )

	return s

def ExportCharactersMap( outfile, stringsData ):
	f = OpenFileAsciiOrUnicode( outfile, 'w', 'UTF-16')
	charMap = {}
	outMap = []
	for sheetname, data in stringsData.iteritems():
		(langs, strings) = data
		for section in strings:
			for lang in langs:
				numStrings = len(section[lang])
				for i in range(0, numStrings):
					item = section[lang][i]
					item = item.replace(u'\u2026', u'...')
					for c in item:
						charMap[c] = 1
	for (k, _) in charMap.iteritems():
		outMap.append(k)
	outMap.sort()

	#print("----------------------- Char Map")
	#print(outMap)
	
	for c in outMap:
		f.write(c)
	f.close()

					
def ExportUTF8( stringsData, outFolder=""):
	global EXPORTED_SHEET_NAMES
	for sheetname, data in stringsData.iteritems():
		(langs, strings) = data
		EXPORTED_SHEET_NAMES.append( sheetname.lower() )

		numString = 0
		for lang in langs:
			completeFilename = lang+'.yml'#getBinaryFilename(outFolder,sheetname,lang)
			f = open(completeFilename,'w')
			f.write( lang + ':\n')
			for section in strings:
				f.write('  ')
				for item in section['ids']:
					f.write( item )
				f.write(': ')
					
					
				numString = len( section[lang] )
				for i in range(0,numString):
					item = section[lang][i]
					item = item.replace(u'\u2026', u'...')
					item = item.encode('utf-8')
					section[lang][i] = item
				for item in section[lang]: 
					numByte = len(item)
					f.write('"')	
					for i in range(0, numByte):
						f.write( item[i] )
					f.write('"\n')			
			f.close()

def ExportLuaConstants( outfile, stringsData, classname ):
	f = open(outfile,'w')
	f.write("-- File generated by " + sys.argv[0] + "\n")
	f.write("\n")

	f.write(classname + " = {\n")
	f.write("\n")
	
	sheetID = 0;
	for sheetname, data in stringsData.iteritems():				
		f.write("\n")
		f.write("\t--------------------------------------------------\n")
		f.write("\t-- sheet " + sheetname + "\n")
		f.write("\t--------------------------------------------------\n")
		f.write("\t" + sheetname.upper() + " = {\n")
		(langs, strings) = data
		for section in strings:			
			for item in section['ids']:				
				f.write("\t\t" + item.upper() + " = \"" + item.upper() + "\",\n")
		f.write("\t},\n")
			
	f.write("}\n");
	f.close()



##########################################################
def ExportLanguageArray( languageData, outputPack ):
	
	f = open("LanguagesArrays.h",'w')
	f.write("// File generated by " + sys.argv[0] + "\n")
	f.write("// File generated by " + sys.argv[0] + "\n")
	f.write("// File generated by " + sys.argv[0] + "\n")
	f.write("\n")
	
	f.write("final static short[] Languages = "+ "\n")
	f.write("{\n")
	i = 0
	numLanguage = len(languageData)
	while i < numLanguage:
		(langID, name, strID ) = languageData[i]
		i = i + 1
		f.write("\t" + strID)
		if i < numLanguage:
				f.write(",")
		f.write("\n")
	f.write("};\n")
	
	f.write("final static short[] s_LanguagePackNames = "+ "\n")
	f.write("{\n")
	i = 0
	while i < numLanguage:
		(langID, name, strID ) = languageData[i]
		i = i + 1
		f.write("\t" + "DATA.PACK_TEXTS_"+langID+"_ID")
		if i < numLanguage:
				f.write(",")
		f.write("\n")
	f.write("};\n")
	
	f.close()

	f =	open(outputPack,'w')
	i = 0
	print "hi " + str(numLanguage)
	while i < numLanguage:
		(langID, name, strID ) = languageData[i]
		i = i + 1
		f.write("-----------------------------------------------"+"\n")
		f.write("package:TEXTS_"+langID+"\n")
		
		for sheetname in EXPORTED_SHEET_NAMES:			
			f.write("id:" + sheetname.upper() + "\t\t\t\t\t"+"file:" + sheetname.lower() + "."+ name + "\n")

		f.write("\n")
	f.close()

def GetWantedLanguage( languageDataFile, outputPack ):
	global EXPORTED_SHEET_NAMES	
	languageToAdd = []
	fileToRead	= file(languageDataFile)
	languageToAddLines = fileToRead.readlines()

	for line in languageToAddLines:
		line=line.replace('\n','')
		if line.find("//") == -1 :
			tmp = line.split(",")
			if len(tmp) != 3:
				print "Wrong number of value :"+line
			elif os.environ.get('USE_LANGUAGE_'+tmp[0]) == '1':
				print tmp[0] +"("+tmp[1]+") will be include in the build"
				languageToAdd.append( (tmp[0],tmp[1],tmp[2]) )
	ExportLanguageArray( languageToAdd, outputPack )			
					
	

def removeIgnored(item, ignoreList):
	if item	== None:
		return
	for	ignoreString in	ignoreList:
		item = item.replace(ignoreString, '')
	return item
# tests
#stringsXML2XLS('strings.xml','strings.xls')
#stringsXLS2XML('strings.xls','strings_out.xml')

#wen xiao temp modify for this project
if __name__	== '__main__':
		if len(sys.argv) < 2:
			print "Usage: stringconv.py	(-xml2xls|-xls2xml|-xlssheets2xml|-xlssheets2bin|-xlssheets2binutf8) infile outfile configfile outputPack [group_prefix]	[--spec	xls_sheet_name]	[--upcase|--downcase] [--ignore	string]"
		else:
			infile = sys.argv[1]
			outfile	 = sys.argv[2]
			ExportUTF8(stringsLoadData(infile, ""), outfile)

#if __name__	== '__main__':
#if len(sys.argv) < 6:
#	print "Usage: stringconv.py	(-xml2xls|-xls2xml|-xlssheets2xml|-xlssheets2bin|-xlssheets2binutf8) infile outfile configfile outputPack [group_prefix]	[--spec	xls_sheet_name]	[--upcase|--downcase] [--ignore	string]"
#else:
#	knownoptions = [ '--spec', '--upcase', '--downcase', '--ignore'	]
#	infile = sys.argv[2]
#	outfile	 = sys.argv[3]
#	configfile	 = sys.argv[4]
#	outputpack	 = sys.argv[5]
#	
#	group_prefix = ""
#	ignoreList = []
#	if len(sys.argv) > 6 and not (sys.argv[6] in knownoptions):
#		group_prefix  =	sys.argv[6]
#	
#	spec_name =	""	
#	if '--spec'	in sys.argv:
#		spec_name =	sys.argv[sys.argv.index('--spec') +	1]
#					
#		caseoption = None
#		if '--upcase' in sys.argv:
#			caseoption = 'up'
#		if '--downcase'	in sys.argv:
#			caseoption = 'down'
#	
#	try:
#		ignoreIndex	= sys.argv.index('--ignore')
#		while ignoreIndex >	-1:
#			ignoreList.append(sys.argv[ignoreIndex + 1])
#			ignoreIndex	= sys.argv.index('--ignore', ignoreIndex+2)
#	except:
#		pass
#			
#	if sys.argv[1] == '-xml2xls' :
#		stringsXML2XLS(infile, outfile,	group_prefix)
#	elif sys.argv[1] ==	'-xls2xml' :
#		stringsXLS2XML(infile, outfile,	group_prefix, caseoption)
#	elif sys.argv[1] ==	'-xlssheets2xml' :
#		stringsXLSSheet2XML(infile,	group_prefix, spec_name, ignoreList)
#	elif sys.argv[1] ==	'-xlssheets2bin':
#		stringsXLSSheet2BIN(infile,	group_prefix, spec_name, ignoreList)
#	elif sys.argv[1] ==	'-xlssheets2binutf8':
#		stringsXLSSheet2BIN_UTF8(infile,	group_prefix, spec_name, ignoreList)
#	else :
#		print 'Invalid conversion requested	:' + sys.argv[1]
#
#	GetWantedLanguage(configfile, outputpack);
#
#	print 'Done'




