#
# Utility to convert strings from game2D's XML format to Excel and back.
#
# C.D. July	2006
#

import xml.dom.minidom
from pyExcelerator import *

# stuff	to handle text encodings
import codecs
enc, dec, read_wrap, write_wrap	= codecs.lookup('utf-8')

import struct
import os

RUSSIAN_MAPPING_UTF8_TO_ASCII = [ (1040,'A'),
				  (1042,'B'),
				  (1045,'E'),
				  (1047,'3'),
				  (1050,'K'),
				  (1052,'M'),
				  (1053,'H'),
				  (1054,'O'),
				  (1056,'P'),
				  (1057,'C'),
				  (1058,'T'),
				  (1059,'Y'),
				  (1061,'X') ]

EXPORTED_SHEET_NAMES = []

def IsValidKey(key):
	for char in key:
		if (char == '_'
		or char == '-'
		or (char >= 'a' and char <= 'z')
		or (char >= 'A' and char <= 'Z')
		or (char >= '0' and char <= '9')):
			continue
		else:
			return False
	return True

def printXLS(inputfile):
	langs =	[]
	sections = {}
	name,vals =	parse_xls(inputfile)[0]

	col	= 2
	while vals.has_key(	(0,col)	) :
		langs.append( vals[(0, col)] )
		col	+= 1
	numLangs = col - 2
	assert len(set(langs)) == len(langs), 'found duplicate lang :' + str(langs)

	for i in range(len(langs)):
		print langs[i]

	row	= 1
	while vals.has_key(	(row,0)	) :
		row	+= 1
	numStrings = row

	for	line in	range(1,numStrings)	:
		sectionName	= vals[(line, 0)]
		print sectionName
		if not sections.has_key( sectionName ) :
			sections[sectionName] =	{ 'name' : sectionName,	'ids' :	[] }
			for	lang in	langs :
				sections[sectionName][lang]	= []
		section	= sections[sectionName]
		strId =	vals[(line,	1)]
		print strId
		if(strId in section['ids']):
			print("ERROR: duplicate textID :" + strId + "\t\t In Sheet: " + sectionName )
		if(not IsValidKey(strId)):
			print("ERROR: invalid textID :" + strId + "\t\t In Sheet: " + sectionName )
		section['ids'].append(strId)		
		for	i in range(numLangs) :
			strn = ' '
			cotent = ' '
			if vals.has_key( (line,	i +	2) ) :
				strn = vals[(line, i + 2)]
				if isinstance(strn, float):##HACK: For value "5" excel return float.. so we don't want "5.0", is why we convert it in INT then STR
					strn = int(strn)
				strn = unicode(strn)
				# replace non-ascii	characters
				strn = strn.replace( u'\u2026', u'...')
			cotent= strId+"="+strn 
			section[langs[i]].append(cotent)
			print cotent

#	except Exception, exc:
#		raise Exception('Error Converting Strings: [' +	name + ']['	+ sectionName +	'][' + strId + ']['	+ langs[i] + ']')

	return ( list(langs), sections.values()	)

def	parseXLSStrings( inputfile,	group_prefix, sheet):
#	try:
		langs =	[]
		sections = {}

		name,vals =	parse_xls(inputfile, group_prefix)[sheet]
		print "sheet name = "+name
		#count languages
		col	= 2
		while vals.has_key(	(0,col)	) :
			langs.append( vals[(0, col)].lower() )
			col	+= 1
		numLangs = col - 2
		assert len(set(langs)) == len(langs), 'found duplicate lang :' + str(langs)

		#count strings
		row	= 1
		while vals.has_key(	(row,0)	) :
			row	+= 1
		numStrings = row

		print "numLangs = "+str(numLangs)+"numStrings = "+str(numStrings)
		for	line in	range(1,numStrings)	:
			sectionName	= vals[(line, 0)]
			sectionName	= group_prefix + sectionName
			if not sections.has_key( sectionName ) :
				sections[sectionName] =	{ 'name' : sectionName,	'ids' :	[] }
				for	lang in	langs :
					sections[sectionName][lang]	= []
			section	= sections[sectionName]
			strId =	vals[(line,	1)]
			if(strId in section['ids']):
				print("ERROR: duplicate textID :" + strId + "\t\t In Sheet: " + sectionName )
			if(not IsValidKey(strId)):
				print("ERROR: invalid textID :" + strId + "\t\t In Sheet: " + sectionName )
			section['ids'].append(strId)
			for	i in range(numLangs) :
				strn = ' '
				cotent = ' '
				if vals.has_key( (line,	i +	2) ) :
					strn = vals[(line, i + 2)]
					if isinstance(strn, float):##HACK: For value "5" excel return float.. so we don't want "5.0", is why we convert it in INT then STR
						strn = int(strn)
					strn = unicode(strn)
					# replace non-ascii	characters
					strn = strn.replace( u'\u2026', u'...')
				cotent= strId+"="+strn 	
				section[langs[i]].append( cotent )

#	except Exception, exc:
#		raise Exception('Error Converting Strings: [' +	name + ']['	+ sectionName +	'][' + strId + ']['	+ langs[i] + ']')
		#print(sections[sectionName][langs[1]])
		return ( list(langs), sections[sectionName])

CONFIG_LANGUANGE={"cn":"Chinese","en":"English","fr":"French"}
def getBinaryFilename(outFolder,sheet,lang):
	#TODO replace 'bad' filecharacters
	filename=""
	if CONFIG_LANGUANGE.has_key(lang) :
		filename = CONFIG_LANGUANGE[lang]+".lan"
	else:
		filename = lang.lower()+".lan"  #sheet.lower() + "." + 
	return os.path.join( outFolder, filename)


def ExportUTF8( stringsData, outFolder=""):
	global EXPORTED_SHEET_NAMES
	allStrings={}
	for sheetname, data in stringsData.iteritems():
		(langs, strings) = data
		EXPORTED_SHEET_NAMES.append( sheetname.lower() )
		print sheetname
		numString = 0
		for lang in langs:
			if not allStrings.has_key(lang):
				allStrings[lang]=[]
			allStrings[lang].extend(strings[lang])

	print langs
	for lang in langs:
		section=allStrings[lang]
		completeFilename = getBinaryFilename(outFolder,sheetname,lang)
		print completeFilename
		f = open(completeFilename,'wb')
		numString = len( section)
		for i in range(0,numString):
			item = section[i]
			item = item.replace('\r',"\\r")
			item = item.replace('\n',"\\n")
			item = item.replace(u'\u2026', u'...')
			item = item+"\n"
			item = item.encode('utf-8')
			section[i] = item

		for item in section:
			f.write(item)
		f.close()
		

def stringsLoadData( inputfile, group_prefix ):
	sheetcounter = 0
	xlWorkBook = parse_xls(inputfile, group_prefix)
	stringsData = {}
	#allString=[]
	for sheet_name, values in xlWorkBook:
		(langs,strings)	= parseXLSStrings(inputfile, group_prefix, sheetcounter)
		sheetcounter +=	1
		print sheet_name,langs
		stringsData[sheet_name] = (langs, strings)
	#	allString=allString+strings
	#stringsData[" "]=(langs,allString)
	return stringsData


##########################################################

# tests
#stringsXML2XLS('strings.xml','strings.xls')
#stringsXLS2XML('strings.xls','strings_out.xml')

#wen xiao temp modify for this project
if __name__	== '__main__':
		if len(sys.argv) < 2:
			print "Usage: stringconv.py	(-xml2xls|-xls2xml|-xlssheets2xml|-xlssheets2bin|-xlssheets2binutf8) infile outfile configfile outputPack [group_prefix]	[--spec	xls_sheet_name]	[--upcase|--downcase] [--ignore	string]"
		else:
			infile = sys.argv[1]
			outfile	 = sys.argv[2]
			print(' infile name = '+infile)
			#printXLS(infile)
			ExportUTF8(stringsLoadData(infile, ""), outfile)


#if __name__	== '__main__':
#if len(sys.argv) < 6:
#	print "Usage: stringconv.py	(-xml2xls|-xls2xml|-xlssheets2xml|-xlssheets2bin|-xlssheets2binutf8) infile outfile configfile outputPack [group_prefix]	[--spec	xls_sheet_name]	[--upcase|--downcase] [--ignore	string]"
#else:
#	knownoptions = [ '--spec', '--upcase', '--downcase', '--ignore'	]
#	infile = sys.argv[2]
#	outfile	 = sys.argv[3]
#	configfile	 = sys.argv[4]
#	outputpack	 = sys.argv[5]
#
#	group_prefix = ""
#	ignoreList = []
#	if len(sys.argv) > 6 and not (sys.argv[6] in knownoptions):
#		group_prefix  =	sys.argv[6]
#
#	spec_name =	""
#	if '--spec'	in sys.argv:
#		spec_name =	sys.argv[sys.argv.index('--spec') +	1]
#
#		caseoption = None
#		if '--upcase' in sys.argv:
#			caseoption = 'up'
#		if '--downcase'	in sys.argv:
#			caseoption = 'down'
#
#	try:
#		ignoreIndex	= sys.argv.index('--ignore')
#		while ignoreIndex >	-1:
#			ignoreList.append(sys.argv[ignoreIndex + 1])
#			ignoreIndex	= sys.argv.index('--ignore', ignoreIndex+2)
#	except:
#		pass
#
#	if sys.argv[1] == '-xml2xls' :
#		stringsXML2XLS(infile, outfile,	group_prefix)
#	elif sys.argv[1] ==	'-xls2xml' :
#		stringsXLS2XML(infile, outfile,	group_prefix, caseoption)
#	elif sys.argv[1] ==	'-xlssheets2xml' :
#		stringsXLSSheet2XML(infile,	group_prefix, spec_name, ignoreList)
#	elif sys.argv[1] ==	'-xlssheets2bin':
#		stringsXLSSheet2BIN(infile,	group_prefix, spec_name, ignoreList)
#	elif sys.argv[1] ==	'-xlssheets2binutf8':
#		stringsXLSSheet2BIN_UTF8(infile,	group_prefix, spec_name, ignoreList)
#	else :
#		print 'Invalid conversion requested	:' + sys.argv[1]
#
#	GetWantedLanguage(configfile, outputpack);
#
#	print 'Done'




